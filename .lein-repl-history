(apply + [])
(defn generate-n-fibonacci [n]
  (cond
    (= n 1) [1]
    (= n 2) [1 2]
    (>= n 3) (let [leading-fibonacci (generate-n-fibonacci (dec n))]
              (conj leading-fibonacci (+ (nth leading-fibonacci (- n 3)) (last leading-fibonacci)))))
)
(defn euler-2 [n]
  (filter #{even? %} (generate-n-fibonacci n))
  )
(defn euler-2 [n]
  (filter #(even? %) (generate-n-fibonacci n)))
(defn generate-n-fibonacci [n]
  (cond
    (= n 1) [1]
    (= n 2) [1 2]
    (>= n 3) (let [leading-fibonacci (generate-n-fibonacci (dec n))]
              (conj leading-fibonacci (+ (nth leading-fibonacci (- n 3)) (last leading-fibonacci))))))
euler-2 2
exit
(defn generate-n-fibonacci [n]
  (cond
    (= n 1) [1]
    (= n 2) [1 2]
    (>= n 3) (let [leading-fibonacci (generate-n-fibonacci (dec n))]
              (conj leading-fibonacci (+ (nth leading-fibonacci (- n 3)) (last leading-fibonacci))))))
(defn generate-fibonacci-upto-n [n]
  (loop [iter 1]
    (let [generated-sequence (generate-n-fibonacci iter)]
      if(>= (last generated-sequence) n
           (drop-last generated-sequence)
            (recur (inc iter))))))
(defn generate-fibonacci-upto-n [n]
  (loop [iter 1]
    (let [generated-sequence (generate-n-fibonacci iter)]
      (if(>= (last generated-sequence) n
           (drop-last generated-sequence)
            (recur (inc iter)))))))
(defn generate-fibonacci-upto-n [n]
  (loop [iter 1]
    (let [generated-sequence (generate-n-fibonacci iter)]
      (if(>= (last generated-sequence) n)
           (drop-last generated-sequence)
            (recur (inc iter))))))
generate-fibonacci-upto-n 4
(defn generate-fibonacci-upto-n [n]
  (loop [iter 1]
    (let [generated-sequence (generate-n-fibonacci iter)]
      (if (>= (last generated-sequence) n)
           '(drop-last generated-sequence)
            (recur (inc iter))))))
generate-fibonacci-upto-n 4
 (defn is-prime? [n]
   (cond
     (<= n 1) false
     :else (let [sqrt-n (/ n n)]
             (loop [factor 2]
               (if (= 0 (rem n 2))
                 false
                 (recur (inc factor)))))))
is-prime? 2
exit
(def v [1 2 3])
(def l (list 1 2 3))
(conj v 4)
(conj l 4)
